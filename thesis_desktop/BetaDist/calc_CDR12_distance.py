"""
THIS SCRIPT IS USED TO COMPARE TWO V-GENES WHEN COMPARING TCRs
--------------------------------------------------------------
the script rely on dictionaries and input library files. 
These can be found on github.com/kdegnemite/TCR_beta_distance_metric.

Dependencies: 
    collections module
    Library files

"""
from collections import defaultdict

###############################################################################
"""
CDR1 and CDR2 Structure
"""
###############################################################################

def create_CDR12_dict(filepath):
    """
    Function that convert the CDR1 and CDR2 distance matrix into a dictionary. 
    The input is any type of distance matrix in CSV format with the V-genes as
    index and columns. 
    
    Input file format:
    -------------------
    CDR1        | TRBV07-3_02 | TRBV10-3_01 |..
    TRBV07-3_02 |      0      |    0.6177   |..
    TRBV10-3_01 |    0.6177   |      0      |..
    
    where 0 indicate identical mainchain conformations and 1 completly 
    different.

    There are two main types of distance matrices:
        1. The structural based libraies: 
            The files are absolute files, that was generated using the LYRA 
            framework to pairwisely compare mainchain conformations of 
            all V-genes in their predicted conformations. Comparison frameworks 
            can be altered, however 1-TM and normalized RMSD score files exist
            today.  
        2. The sequence based distance librariesReturns
            The files in this libray is generated by comparing the CDR1 and 
            CDR2 sequence of each V gene as they are stated in the IMGT 
            database. After comparison with the chosen framework, they have 
            been normailized upholding the 0-1 standard.
            
            Notice
            --------
            If yet another such matrix should be generated, use
            The file "CDR_1_2_seq.csv":
        
                Input file format:
                -------------------
                allele      |   CDR1_seq  |   CDR2_seq  |..
                TRBV07-3_02 |   'SGHTA'   |   'FQGTGA'  |..
                TRBV10-3_01 |   'ENHRY'   |   'SYGVKD'  |..

    
            CDR_sequence = pd.read_csv(filepath,
                               usecols=['allele', 'CDR1_seq', 'CDR2_seq'])

            #Set the alleles as index to be keys
            CDR_sequence = CDR_sequence.set_index('allele')
            return CDR_sequence.T.to_dict('list')

    Parameters
    -----------------
    The filepath to the library csv file.

    Output
    -------
    A dict containing each combination of V-genes and their internal distance.
    The dictionary can be called to measure the distance between two V-genes.
    """
    #reading each line of the library matrix
    with open(filepath, 'r') as fp:
        lines = [line.strip("\n").split(",") for line in fp]
    # Extract all the genes from the file header excluding the first element.
    genes     = lines[0][1:]
    distances = lines[1:]
    # Converts the distance matrix to a dictionary with genes as keys.
    CDR_dict = defaultdict(float)
    for row in distances:
        gene2 = row[0]
        for gene1, distance in zip(genes, row[1:]):
            CDR_dict[gene1, gene2] = float(distance)
    return CDR_dict